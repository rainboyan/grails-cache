buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.grails.org/grails/core" }
        maven { url 'https://repo.gradle.org/gradle/libs-releases' }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.3.0"
        classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.6.1'
        classpath "gradle.plugin.com.github.erdi.webdriver-binaries:webdriver-binaries-gradle-plugin:$webdriverBinariesVersion"
    }
}

ext."signing.keyId" = project.hasProperty("signing.keyId") ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.hasProperty("signing.password") ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.hasProperty("signing.secretKeyRingFile") ? project.getProperty('signing.secretKeyRingFile') : ("${System.properties['user.home']}${File.separator}.gnupg${File.separator}secring.gpg")
ext.isReleaseVersion = !projectVersion.endsWith("SNAPSHOT")

version project.projectVersion
group "org.grails.plugins"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"java-library"
apply plugin:"org.grails.grails-plugin"
apply plugin:"org.grails.grails-gsp"
apply plugin: "com.github.erdi.webdriver-binaries"
apply plugin: "io.github.gradle-nexus.publish-plugin"
apply plugin: "maven-publish"
apply plugin: "signing"

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

configurations {
    all {
        resolutionStrategy {
            eachDependency { DependencyResolveDetails details ->
                if (details.requested.group == "org.spockframework") {
                    details.useVersion(spockVersion)
                }
            }
            // Force groovy using 4.0
            dependencySubstitution {
                substitute(module("org.codehaus.groovy:groovy")).using(module("org.apache.groovy:groovy:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-ant")).using(module("org.apache.groovy:groovy-ant:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-dateutil")).using(module("org.apache.groovy:groovy-dateutil:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-json")).using(module("org.apache.groovy:groovy-json:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-jmx")).using(module("org.apache.groovy:groovy-jmx:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-sql")).using(module("org.apache.groovy:groovy-sql:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-templates")).using(module("org.apache.groovy:groovy-templates:$groovyVersion"))
                substitute(module("org.codehaus.groovy:groovy-xml")).using(module("org.apache.groovy:groovy-xml:$groovyVersion"))
            }
        }
    }
}

dependencies {
    compileOnly "org.grails:grails-boot"
    api "org.grails:grails-core"
    api "org.grails:grails-web-gsp"
	api "org.grails:grails-datastore-core:$gormVersion"
	api "org.grails:grails-datastore-gorm:$gormVersion"
    api 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.2'
    api "org.grails:grails-web-gsp:$grailsVersion"
    testImplementation "org.grails.plugins:geb:$gebVersion"
    profile "org.grails.profiles:web-plugin"
    testImplementation "org.grails:grails-test-support"
    testImplementation "org.mockito:mockito-core"
    testImplementation 'org.codehaus.gpars:gpars:1.2.1', {
        exclude group:'org.multiverse', module:'multiverse-core'
        exclude group:'org.codehaus.groovy', module: 'groovy-all'
    }
    testImplementation "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-safari-driver:$seleniumSafariDriverVersion"
    testImplementation "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
    testImplementation "org.seleniumhq.selenium:selenium-htmlunit-driver:2.52.0"
    testImplementation "net.sourceforge.htmlunit:htmlunit:2.18"
}

webdriverBinaries {
    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        chromedriver "$chromeDriverVersion"
        geckodriver "$geckodriverVersion"
    }
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env', 'chromeHeadless')
    systemProperty "geb.build.reportsDir", reporting.file("geb/integrationTest")

    if (!System.getenv().containsKey('GITHUB_ACTIONS')) {
        systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
        systemProperty 'webdriver.gecko.driver', System.getProperty('webdriver.gecko.driver')
    } else {
        systemProperty 'webdriver.chrome.driver', "${System.getenv('CHROMEWEBDRIVER')}/chromedriver"
        systemProperty 'webdriver.gecko.driver', "${System.getenv('GECKOWEBDRIVER')}/geckodriver"
    }
}

bootRun {
    jvmArgs(
        '-Dspring.output.ansi.enabled=always',
        '-noverify',
        '-XX:TieredStopAtLevel=1',
        '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}
// enable if you wish to package this plugin as a standalone application
bootJar.enabled = false

integrationTest {
    testLogging {
        exceptionFormat = 'full'
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    withJavadocJar()
    withSourcesJar()
}

jar {
    enabled = true
    archiveClassifier.set('')
    exclude 'cache/Application.class', 'com/demo/**', 'gsp_*', '/gsp/views.properties'
    includeEmptyDirs = false
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'cache'
            version = project.version

            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            from components.java

            pom {
                name = "Grails Cache Plugin"
                description = "The Grails Cache plugin provides powerful and easy to use caching functionality to Grails applications and plugins."
                url = 'https://github.com/rainboyan/grails-cache'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'rainboyan'
                        name = 'Michael Yan'
                        email = 'rain@rainboyan.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/rainboyan/grails-cache.git'
                    developerConnection = 'scm:git:ssh://github.com:rainboyan/grails-cache.git'
                    url = 'https://github.com/rainboyan/grails-cache/tree/main'
                }
            }
        }
    }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
            def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
            def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileId") ? project.sonatypeOssStagingProfileId : ''
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.maven
    }
}